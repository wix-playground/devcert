"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = require("fs");
const mkdirp_1 = require("mkdirp");
const lodash_1 = require("lodash");
const applicationConfigPath = require("application-config-path");
const eol_1 = tslib_1.__importDefault(require("eol"));
const utils_1 = require("./utils");
// Platform shortcuts
exports.isMac = process.platform === 'darwin';
exports.isLinux = process.platform === 'linux';
exports.isWindows = process.platform === 'win32';
// Common paths
exports.configDir = applicationConfigPath('devcert');
exports.configPath = path_1.default.join.bind(path_1.default, exports.configDir);
exports.domainsDir = exports.configPath('domains');
exports.pathForDomain = path_1.default.join.bind(path_1.default, exports.domainsDir);
exports.caVersionFile = exports.configPath('devcert-ca-version');
exports.opensslSerialFilePath = exports.configPath('certificate-authority', 'serial');
exports.opensslDatabaseFilePath = exports.configPath('certificate-authority', 'index.txt');
exports.caSelfSignConfig = path_1.default.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');
function withDomainSigningRequestConfig(domain, cb) {
    let tmpFile = utils_1.mktmp();
    let source = fs_1.readFileSync(path_1.default.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');
    let template = lodash_1.template(source);
    let result = template({ domain });
    fs_1.writeFileSync(tmpFile, eol_1.default.auto(result));
    cb(tmpFile);
    fs_1.unlinkSync(tmpFile);
}
exports.withDomainSigningRequestConfig = withDomainSigningRequestConfig;
function withDomainCertificateConfig(domain, cb) {
    let tmpFile = utils_1.mktmp();
    let source = fs_1.readFileSync(path_1.default.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');
    let template = lodash_1.template(source);
    let result = template({
        domain,
        serialFile: exports.opensslSerialFilePath,
        databaseFile: exports.opensslDatabaseFilePath,
        domainDir: exports.pathForDomain(domain)
    });
    fs_1.writeFileSync(tmpFile, eol_1.default.auto(result));
    cb(tmpFile);
    fs_1.unlinkSync(tmpFile);
}
exports.withDomainCertificateConfig = withDomainCertificateConfig;
// confTemplate = confTemplate.replace(/DATABASE_PATH/, configPath('index.txt').replace(/\\/g, '\\\\'));
// confTemplate = confTemplate.replace(/SERIAL_PATH/, configPath('serial').replace(/\\/g, '\\\\'));
// confTemplate = eol.auto(confTemplate);
exports.rootCADir = exports.configPath('certificate-authority');
exports.rootCAKeyPath = exports.configPath('certificate-authority', 'private-key.key');
exports.rootCACertPath = exports.configPath('certificate-authority', 'certificate.cert');
mkdirp_1.sync(exports.configDir);
mkdirp_1.sync(exports.domainsDir);
mkdirp_1.sync(exports.rootCADir);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3BldGVyay9wcm9qZWN0cy9kZXZjZXJ0LyIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdEQUF3QjtBQUN4QiwyQkFJWTtBQUNaLG1DQUF3QztBQUN4QyxtQ0FBa0Q7QUFDbEQsaUVBQWtFO0FBQ2xFLHNEQUFzQjtBQUN0QixtQ0FBZ0M7QUFFaEMscUJBQXFCO0FBQ1IsUUFBQSxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7QUFDdEMsUUFBQSxPQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUM7QUFDdkMsUUFBQSxTQUFTLEdBQUcsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUM7QUFFdEQsZUFBZTtBQUNGLFFBQUEsU0FBUyxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzdDLFFBQUEsVUFBVSxHQUEwQyxjQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDN0UsY0FBSSxFQUNKLGlCQUFTLENBQ1YsQ0FBQztBQUVXLFFBQUEsVUFBVSxHQUFHLGtCQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkMsUUFBQSxhQUFhLEdBR1osY0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBSSxFQUFFLGtCQUFVLENBQUMsQ0FBQztBQUVsQyxRQUFBLGFBQWEsR0FBRyxrQkFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDakQsUUFBQSxxQkFBcUIsR0FBRyxrQkFBVSxDQUM3Qyx1QkFBdUIsRUFDdkIsUUFBUSxDQUNULENBQUM7QUFDVyxRQUFBLHVCQUF1QixHQUFHLGtCQUFVLENBQy9DLHVCQUF1QixFQUN2QixXQUFXLENBQ1osQ0FBQztBQUNXLFFBQUEsZ0JBQWdCLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FDdkMsU0FBUyxFQUNULG1FQUFtRSxDQUNwRSxDQUFDO0FBRUYsd0NBQ0UsTUFBYyxFQUNkLEVBQThCO0lBRTlCLElBQUksT0FBTyxHQUFHLGFBQUssRUFBRSxDQUFDO0lBQ3RCLElBQUksTUFBTSxHQUFHLGlCQUFRLENBQ25CLGNBQUksQ0FBQyxJQUFJLENBQ1AsU0FBUyxFQUNULG9FQUFvRSxDQUNyRSxFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0YsSUFBSSxRQUFRLEdBQUcsaUJBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLGtCQUFTLENBQUMsT0FBTyxFQUFFLGFBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDWixlQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDZCxDQUFDO0FBakJELHdFQWlCQztBQUVELHFDQUNFLE1BQWMsRUFDZCxFQUE4QjtJQUU5QixJQUFJLE9BQU8sR0FBRyxhQUFLLEVBQUUsQ0FBQztJQUN0QixJQUFJLE1BQU0sR0FBRyxpQkFBUSxDQUNuQixjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxvREFBb0QsQ0FBQyxFQUMxRSxPQUFPLENBQ1IsQ0FBQztJQUNGLElBQUksUUFBUSxHQUFHLGlCQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQ3BCLE1BQU07UUFDTixVQUFVLEVBQUUsNkJBQXFCO1FBQ2pDLFlBQVksRUFBRSwrQkFBdUI7UUFDckMsU0FBUyxFQUFFLHFCQUFhLENBQUMsTUFBTSxDQUFDO0tBQ2pDLENBQUMsQ0FBQztJQUNILGtCQUFTLENBQUMsT0FBTyxFQUFFLGFBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDWixlQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDZCxDQUFDO0FBbkJELGtFQW1CQztBQUVELHdHQUF3RztBQUN4RyxtR0FBbUc7QUFDbkcseUNBQXlDO0FBRTVCLFFBQUEsU0FBUyxHQUFHLGtCQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNoRCxRQUFBLGFBQWEsR0FBRyxrQkFBVSxDQUNyQyx1QkFBdUIsRUFDdkIsaUJBQWlCLENBQ2xCLENBQUM7QUFDVyxRQUFBLGNBQWMsR0FBRyxrQkFBVSxDQUN0Qyx1QkFBdUIsRUFDdkIsa0JBQWtCLENBQ25CLENBQUM7QUFFRixhQUFNLENBQUMsaUJBQVMsQ0FBQyxDQUFDO0FBQ2xCLGFBQU0sQ0FBQyxrQkFBVSxDQUFDLENBQUM7QUFDbkIsYUFBTSxDQUFDLGlCQUFTLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtcbiAgdW5saW5rU3luYyBhcyBybSxcbiAgd3JpdGVGaWxlU3luYyBhcyB3cml0ZUZpbGUsXG4gIHJlYWRGaWxlU3luYyBhcyByZWFkRmlsZVxufSBmcm9tICdmcyc7XG5pbXBvcnQgeyBzeW5jIGFzIG1rZGlycCB9IGZyb20gJ21rZGlycCc7XG5pbXBvcnQgeyB0ZW1wbGF0ZSBhcyBtYWtlVGVtcGxhdGUgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGFwcGxpY2F0aW9uQ29uZmlnUGF0aCA9IHJlcXVpcmUoJ2FwcGxpY2F0aW9uLWNvbmZpZy1wYXRoJyk7XG5pbXBvcnQgZW9sIGZyb20gJ2VvbCc7XG5pbXBvcnQgeyBta3RtcCB9IGZyb20gJy4vdXRpbHMnO1xuXG4vLyBQbGF0Zm9ybSBzaG9ydGN1dHNcbmV4cG9ydCBjb25zdCBpc01hYyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nO1xuZXhwb3J0IGNvbnN0IGlzTGludXggPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnO1xuZXhwb3J0IGNvbnN0IGlzV2luZG93cyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG5cbi8vIENvbW1vbiBwYXRoc1xuZXhwb3J0IGNvbnN0IGNvbmZpZ0RpciA9IGFwcGxpY2F0aW9uQ29uZmlnUGF0aCgnZGV2Y2VydCcpO1xuZXhwb3J0IGNvbnN0IGNvbmZpZ1BhdGg6ICguLi5wYXRoU2VnbWVudHM6IHN0cmluZ1tdKSA9PiBzdHJpbmcgPSBwYXRoLmpvaW4uYmluZChcbiAgcGF0aCxcbiAgY29uZmlnRGlyXG4pO1xuXG5leHBvcnQgY29uc3QgZG9tYWluc0RpciA9IGNvbmZpZ1BhdGgoJ2RvbWFpbnMnKTtcbmV4cG9ydCBjb25zdCBwYXRoRm9yRG9tYWluOiAoXG4gIGRvbWFpbjogc3RyaW5nLFxuICAuLi5wYXRoU2VnbWVudHM6IHN0cmluZ1tdXG4pID0+IHN0cmluZyA9IHBhdGguam9pbi5iaW5kKHBhdGgsIGRvbWFpbnNEaXIpO1xuXG5leHBvcnQgY29uc3QgY2FWZXJzaW9uRmlsZSA9IGNvbmZpZ1BhdGgoJ2RldmNlcnQtY2EtdmVyc2lvbicpO1xuZXhwb3J0IGNvbnN0IG9wZW5zc2xTZXJpYWxGaWxlUGF0aCA9IGNvbmZpZ1BhdGgoXG4gICdjZXJ0aWZpY2F0ZS1hdXRob3JpdHknLFxuICAnc2VyaWFsJ1xuKTtcbmV4cG9ydCBjb25zdCBvcGVuc3NsRGF0YWJhc2VGaWxlUGF0aCA9IGNvbmZpZ1BhdGgoXG4gICdjZXJ0aWZpY2F0ZS1hdXRob3JpdHknLFxuICAnaW5kZXgudHh0J1xuKTtcbmV4cG9ydCBjb25zdCBjYVNlbGZTaWduQ29uZmlnID0gcGF0aC5qb2luKFxuICBfX2Rpcm5hbWUsXG4gICcuLi9vcGVuc3NsLWNvbmZpZ3VyYXRpb25zL2NlcnRpZmljYXRlLWF1dGhvcml0eS1zZWxmLXNpZ25pbmcuY29uZidcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoRG9tYWluU2lnbmluZ1JlcXVlc3RDb25maWcoXG4gIGRvbWFpbjogc3RyaW5nLFxuICBjYjogKGZpbGVwYXRoOiBzdHJpbmcpID0+IHZvaWRcbikge1xuICBsZXQgdG1wRmlsZSA9IG1rdG1wKCk7XG4gIGxldCBzb3VyY2UgPSByZWFkRmlsZShcbiAgICBwYXRoLmpvaW4oXG4gICAgICBfX2Rpcm5hbWUsXG4gICAgICAnLi4vb3BlbnNzbC1jb25maWd1cmF0aW9ucy9kb21haW4tY2VydGlmaWNhdGUtc2lnbmluZy1yZXF1ZXN0cy5jb25mJ1xuICAgICksXG4gICAgJ3V0Zi04J1xuICApO1xuICBsZXQgdGVtcGxhdGUgPSBtYWtlVGVtcGxhdGUoc291cmNlKTtcbiAgbGV0IHJlc3VsdCA9IHRlbXBsYXRlKHsgZG9tYWluIH0pO1xuICB3cml0ZUZpbGUodG1wRmlsZSwgZW9sLmF1dG8ocmVzdWx0KSk7XG4gIGNiKHRtcEZpbGUpO1xuICBybSh0bXBGaWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhEb21haW5DZXJ0aWZpY2F0ZUNvbmZpZyhcbiAgZG9tYWluOiBzdHJpbmcsXG4gIGNiOiAoZmlsZXBhdGg6IHN0cmluZykgPT4gdm9pZFxuKSB7XG4gIGxldCB0bXBGaWxlID0gbWt0bXAoKTtcbiAgbGV0IHNvdXJjZSA9IHJlYWRGaWxlKFxuICAgIHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9vcGVuc3NsLWNvbmZpZ3VyYXRpb25zL2RvbWFpbi1jZXJ0aWZpY2F0ZXMuY29uZicpLFxuICAgICd1dGYtOCdcbiAgKTtcbiAgbGV0IHRlbXBsYXRlID0gbWFrZVRlbXBsYXRlKHNvdXJjZSk7XG4gIGxldCByZXN1bHQgPSB0ZW1wbGF0ZSh7XG4gICAgZG9tYWluLFxuICAgIHNlcmlhbEZpbGU6IG9wZW5zc2xTZXJpYWxGaWxlUGF0aCxcbiAgICBkYXRhYmFzZUZpbGU6IG9wZW5zc2xEYXRhYmFzZUZpbGVQYXRoLFxuICAgIGRvbWFpbkRpcjogcGF0aEZvckRvbWFpbihkb21haW4pXG4gIH0pO1xuICB3cml0ZUZpbGUodG1wRmlsZSwgZW9sLmF1dG8ocmVzdWx0KSk7XG4gIGNiKHRtcEZpbGUpO1xuICBybSh0bXBGaWxlKTtcbn1cblxuLy8gY29uZlRlbXBsYXRlID0gY29uZlRlbXBsYXRlLnJlcGxhY2UoL0RBVEFCQVNFX1BBVEgvLCBjb25maWdQYXRoKCdpbmRleC50eHQnKS5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpKTtcbi8vIGNvbmZUZW1wbGF0ZSA9IGNvbmZUZW1wbGF0ZS5yZXBsYWNlKC9TRVJJQUxfUEFUSC8sIGNvbmZpZ1BhdGgoJ3NlcmlhbCcpLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJykpO1xuLy8gY29uZlRlbXBsYXRlID0gZW9sLmF1dG8oY29uZlRlbXBsYXRlKTtcblxuZXhwb3J0IGNvbnN0IHJvb3RDQURpciA9IGNvbmZpZ1BhdGgoJ2NlcnRpZmljYXRlLWF1dGhvcml0eScpO1xuZXhwb3J0IGNvbnN0IHJvb3RDQUtleVBhdGggPSBjb25maWdQYXRoKFxuICAnY2VydGlmaWNhdGUtYXV0aG9yaXR5JyxcbiAgJ3ByaXZhdGUta2V5LmtleSdcbik7XG5leHBvcnQgY29uc3Qgcm9vdENBQ2VydFBhdGggPSBjb25maWdQYXRoKFxuICAnY2VydGlmaWNhdGUtYXV0aG9yaXR5JyxcbiAgJ2NlcnRpZmljYXRlLmNlcnQnXG4pO1xuXG5ta2RpcnAoY29uZmlnRGlyKTtcbm1rZGlycChkb21haW5zRGlyKTtcbm1rZGlycChyb290Q0FEaXIpO1xuIl19